unit USM;

interface

uses  System.SysUtils, System.Classes, System.Json, Datasnap.DSServer, Datasnap.DSAuth, Datasnap.DSHTTPWebBroker,
      Web.HTTPApp, System.Variants;

type
{$METHODINFO ON}
  TSM = class(TComponent)
  private
    { Private declarations }
    function primary_key(const tabela : string; const chave : string)       : integer;
    function StripChars ( const Text : string; const InValidChars : System.SysUtils.TSysCharSet) : string;
  public
    { Public declarations }
    // Métodos para os clientes
    function Cliente(const ID_BANCO: integer = 0)     : TJSONObject; // GET
    function UpdateCliente(ID_BANCO : integer)        : TJSONObject; // POST
    function AcceptCliente(const ID_BANCO: integer)   : TJSONObject; // PUT
    function CancelCliente(const ID_Cliente: integer) : TJSONObject; // DELETE

    // Métodos para as listas
    function Lista(const ID_BANCO: integer = 0)   : TJSONObject; // GET
    function UpdateLista(ID_BANCO : integer)      : TJSONObject; // POST
    function AcceptLista(const ID_LISTA: integer) : TJSONObject; // PUT
    function CancelLista(const ID_LISTA: integer) : TJSONObject; // DELETE

    // Métodos para as operações
    function UpdateOperacao(ID_BANCO: integer)       : TJSONObject;
  end;
{$METHODINFO OFF}

implementation


uses FPrincipal;

// PUT
function TSM.AcceptCliente(const ID_BANCO: integer): TJSONObject;
const
  _SELECT = 'SELECT * FROM operacoes';
var
  WebModule   : TWebModule;
  Requisicao  : TJSONArray;
  index       : integer;
  cliente     : TJSONObject;
  strVar      : TArray<string>;
  dataVenc    : TDateTime;
  diasDiff    : integer;
  dataStr     : string;
begin
  with FormPrincipal do
  begin
    DB_Query.Active := false;
    DB_Query.SQL.Text := _SELECT;

    Result := TJSONObject.Create;
    Try
      WebModule := GetDataSnapWebModule;
    Except on E : Exception do
      Result.AddPair('Message', 'Erro ao recuperar conteúdo JSON');
    End;

    if WebModule.Request.Content.IsEmpty then
    begin
        Result.AddPair('Message', 'Conteúdo JSON vazio');
    end;

    strVar := WebModule.Request.ContentFields.ToStringArray;
    dataVenc := VarToDateTime(strVar[1]);
    //if strVar[3] is not null then
    if strVar[3].IsNullOrEmpty(strVar[3]) then
    diasDiff := 0
    else diasDiff := strtoint(strVar[3]);

    dataVenc := dataVenc + diasDiff;
    DateTimeToString(dataStr, 'yyyy-mm-dd' ,dataVenc);

    if ID_BANCO > 0 then
    begin
      DB_Query.SQL.Add(' WHERE banco = :id_banco AND datavencto = :data_vencto');
      DB_Query.ParamByName('id_banco').Value := ID_BANCO;
      DB_Query.ParamByName('data_vencto').Value := dataStr;
      DB_Query.Open;
      DB_Query.DisableControls;
      DB_Query.First;

      Try
        index := 0;
        while not DB_Query.Eof do
        begin
          cliente := TJSONObject.Create;
          cliente.AddPair('cliente', DB_Query.FieldByName('cliente').Value);
          cliente.AddPair('nroperacao', DB_Query.FieldByName('nroperacao').Value);
          cliente.AddPair('remessa', DB_Query.FieldByName('remessa').Value);
          cliente.AddPair('datavencto', DB_Query.FieldByName('datavencto').Value);
          cliente.AddPair('valornominal', DB_Query.FieldByName('valornominal').Value);

          Result.AddPair(inttostr(index), cliente);
          DB_Query.Next;
          index := index+1;
        end;
        Memo_log.Lines.Add('Cliente atualizado');
      Finally
        DB_Query.EnableConstraints;
      End;

    end
    else Result.AddPair('Message', 'Por favor insira um ID');

  end;
end;

function TSM.AcceptLista(const ID_LISTA: integer): TJSONObject;
const
  _UPDATE = 'UPDATE listas SET nome = :nome, tipoemail = :tipoemail, diasvenc = :diasvenc, horadisparo = :horadisparo, mensagem = :mensagem, tipocampanha = :tipocampanha WHERE id = :id';
var
  WebModule   : TWebModule;
  stringJSON  : TArray<string>;
  strValor    : string;
  forIndex    : integer;
  stringTemp  : string;
  listaObj    : TJSONObject;
begin
  Result  := TJSONObject.Create;
  listaObj:= TJSONObject.Create;

  // Tenta recuperar o conteúdo do Request Body
  Try
    WebModule := GetDataSnapWebModule;
  Except on E : Exception do
    Result.AddPair('Message', 'Erro ao recuperar conteúdo');
  End;

  if WebModule.Request.Content.IsEmpty then
  begin
      Result.AddPair('Message', 'Conteúdo vazio');
  end;

  // Recupera a string JSON enviada e constroi um objeto JSON ordenado.
  stringJSON := WebModule.Request.ContentFields.ToStringArray;
  forIndex := 1;
  for strValor in stringJSON do
  begin
    if Odd(forIndex) then
    begin
      stringTemp := StripChars(strValor, [',','\','"','{']);
    end
    else
    begin
      listaObj.AddPair(stringTemp, StripChars(strValor, [',','\','"','{']));
    end;
    forIndex := forIndex+1;
  end;
  // ---------- OBJETO CONSTRUÍDO ----------

  with FormPrincipal do
  begin
    DB_Query.Active := false;
    DB_Query.SQL.Text := _UPDATE;
    DB_Query.ParamByName('id').Value :=  ID_LISTA;
    DB_Query.ParamByName('nome').Value :=  listaObj.Values['nomeLista'].Value;
    DB_Query.ParamByName('tipoemail').Value :=  listaObj.Values['tipoEmail'].Value;
    DB_Query.ParamByName('diasvenc').Value :=  listaObj.Values['diasVencimento'].Value;
    DB_Query.ParamByName('horadisparo').Value :=  listaObj.Values['horaDisparo'].Value;
    DB_Query.ParamByName('mensagem').Value :=  listaObj.Values['mensagemLista'].Value;
    DB_Query.ParamByName('tipocampanha').Value :=  listaObj.Values['tipoCampanha'].Value;

    Try
      DB_Query.ExecSQL;
      Result.AddPair('Response', 'Lista atualizada com sucesso');
      Memo_log.Lines.Add('Lista atualizada');
    Except on E : Exception do
      Result.AddPair('Response', E.Message);
    End;
  end;

end;

// DELETE
function TSM.CancelCliente(const ID_Cliente: integer): TJSONObject;
begin
  Result := TJSONObject.Create;
  Result.AddPair('Message', 'DELETE');
end;

function TSM.CancelLista(const ID_LISTA: integer): TJSONObject;
const
  _DELETE = 'DELETE FROM listas WHERE id = :id';
begin
  Result := TJSONObject.Create;
  with FormPrincipal do
  begin
    DB_Query.Active := false;
    DB_Query.SQL.Text := _DELETE;
    DB_Query.ParamByName('id').Value :=  ID_LISTA;

    Try
      DB_Query.ExecSQL;
      Result.AddPair('Response', 'Lista deletada com sucesso');
      Memo_log.Lines.Add('Lista deletada');
    Except on E : Exception do
      Result.AddPair('Response', E.Message);
    End;
  end;
end;

// GET
function TSM.Cliente(const ID_BANCO: integer): TJSONObject;
const
  _SELECT = 'SELECT o.cliente, o.nroperacao, o.remessa, o.tipooperacao, o.datavencto,  o.valornominal, c.nome, c.cpf FROM operacoes o INNER JOIN clientes c ON c.codigo = o.cliente WHERE o.banco = :id_banco';
var
  index    : integer;
  listaObj : TJSONObject;
begin
  with FormPrincipal do
  begin
    DB_Query.Active := false;
    DB_Query.SQL.Text := _SELECT;
    DB_Query.ParamByName('id_banco').Value := ID_BANCO;
    DB_Query.Open;

    Result := TJSONObject.Create;
    DB_Query.First;
    index := 0;
    while not DB_Query.Eof do
    begin
      listaObj := TJSONObject.Create;

      listaObj.AddPair('cliente', DB_Query.FieldByName('cliente').Value);
      listaObj.AddPair('nroperacao', DB_Query.FieldByName('nroperacao').Value);
      listaObj.AddPair('remessa', DB_Query.FieldByName('remessa').Value);
      listaObj.AddPair('tipooperacao', DB_Query.FieldByName('tipooperacao').Value);
      listaObj.AddPair('datavencto', DB_Query.FieldByName('datavencto').Value);
      listaObj.AddPair('valornominal', DB_Query.FieldByName('valornominal').Value);
      listaObj.AddPair('nome', DB_Query.FieldByName('nome').Value);
      listaObj.AddPair('cpf', DB_Query.FieldByName('cpf').Value);

      Result.AddPair(inttostr(index),listaObj);
      DB_Query.Next;
      index := index+1;
    end;
    Memo_log.Lines.Add('Listagem de Operações/Clientes');
  end;
end;

function TSM.Lista(const ID_BANCO: integer): TJSONObject;
const
  _SELECT = 'SELECT * FROM listas ';
var
  index    : integer;
  listaObj : TJSONObject;
begin
  with FormPrincipal do
  begin
    DB_Query.Active := false;
    DB_Query.SQL.Text := _SELECT;
    DB_Query.SQL.Add('WHERE id_banco = :id_banco ORDER BY id');
    DB_Query.ParamByName('id_banco').Value := ID_BANCO;
    DB_Query.Open;

    Result := TJSONObject.Create;
    DB_Query.First;
    index := 0;
    while not DB_Query.Eof do
    begin
      listaObj := TJSONObject.Create;

      listaObj.AddPair('id', DB_Query.FieldByName('ID').Value);
      listaObj.AddPair('nome', DB_Query.FieldByName('nome').Value);
      listaObj.AddPair('tipoemail', DB_Query.FieldByName('tipoemail').Value);
      listaObj.AddPair('diasvenc', DB_Query.FieldByName('diasvenc').Value);
      listaObj.AddPair('horadisparo', DB_Query.FieldByName('horadisparo').Value);
      listaObj.AddPair('mensagem', DB_Query.FieldByName('mensagem').Value);
      listaObj.AddPair('tipocampanha', DB_Query.FieldByName('tipocampanha').Value);

      Result.AddPair(inttostr(index),listaObj);
      DB_Query.Next;
      index := index+1;
    end;
    Memo_log.Lines.Add('Listagem de Listas');
  end;
end;

// Pegar a chave primária da tabela dada
function TSM.primary_key(const tabela: string; const chave: string): integer;
begin
  with FormPrincipal do
  begin
    DB_IDGen.Active := false;
    DB_IDGen.SQL.Text := 'SELECT FIRST 1 * FROM '+tabela+' ORDER BY '+chave+' DESC';
    DB_IDGen.Open;

    Result := DB_IDGen.FieldByName(chave).AsInteger;
    DB_IDGen.Close;
  end;
end;

function TSM.StripChars(const Text: string;
  const InValidChars: System.SysUtils.TSysCharSet): string;
  var
  i,j,zbsAdj : Integer;
begin
  SetLength(Result,Length(Text));  // Preallocate result maximum length
  j := 0; // Resulting string length counter
  zbsAdj := 1-Low(String); // Handles zero based string offset
  for i := Low(Text) to High(Text) do begin
    if not CharInSet(Text[i],InValidChars) then begin
      Inc(j);
      Result[j-zbsAdj] := Text[i];
    end;
  end;
  SetLength(Result,j); // Set result actual length
end;

// POST
function TSM.UpdateCliente(ID_BANCO : integer): TJSONObject;
const
  _INSERT = 'INSERT INTO clientes (codigo, nome, cpf, endereco, setor, cidade, cep, uf, fone, fone_1, contato_1, e_mail, e_mail1)';
  _INSERT_OP = 'INSERT INTO operacoes (cliente, nroperacao, remessa, banco, tipooperacao, datavencto, valornominal, condnegociais, garantiasreais)';
var
  WebModule   : TWebModule;
  Requisicao  : TJSONArray;
  Valores     : TJSONValue;
  clienteObj  : TJSONObject;
  operacaoObj : TJSONObject;
  ID_Gen      : integer;
  codigoData  : string;
  codremessa  : string;
  dataRem     : TDateTime;
begin
  ID_Gen := primary_key('clientes', 'codigo')+1;
  Result := TJSONObject.Create;
  Try
    WebModule := GetDataSnapWebModule;
  Except on E : Exception do
    Result.AddPair('Message', 'Erro ao recueprar conteúdo');
  End;

  if WebModule.Request.Content.IsEmpty then
  begin
      Result.AddPair('Message', 'Conteúdo vazio');
  end;

    Requisicao := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(WebModule.Request.Content), 0)
      as TJSONArray;

  for Valores in Requisicao do
    begin
      // Constroi o objeto JSON do Cliente
      clienteObj := TJSONObject.Create;
      
      clienteObj.AddPair('NomeCliente', Valores.GetValue<string>('nomedocliente'));
      clienteObj.AddPair('CPF', Valores.GetValue<string>('cpf/cnpj'));
      clienteObj.AddPair('Endereco', Valores.GetValue<string>('endereco'));
      clienteObj.AddPair('bairro', Valores.GetValue<string>('bairro'));
      clienteObj.AddPair('cidade', Valores.GetValue<string>('cidade'));
      clienteObj.AddPair('cep', Valores.GetValue<string>('cep'));
      clienteObj.AddPair('uf', Valores.GetValue<string>('uf'));
      clienteObj.AddPair('telefone1', Valores.GetValue<string>('telefone1'));
      clienteObj.AddPair('telefone2', Valores.GetValue<string>('telefone2'));
      clienteObj.AddPair('telefone3', Valores.GetValue<string>('telefone3'));
      clienteObj.AddPair('telefone4', Valores.GetValue<string>('telefone4'));
      clienteObj.AddPair('telefone5', Valores.GetValue<string>('telefone5'));
      clienteObj.AddPair('telefone6', Valores.GetValue<string>('telefone6'));
      clienteObj.AddPair('email1', Valores.GetValue<string>('email'));
      clienteObj.AddPair('email2', Valores.GetValue<string>('email2'));

      // Constroi o objeto JSON da Operação
      Try
      operacaoObj := TJSONObject.Create;
        operacaoObj.AddPair('nroperacao', Valores.GetValue<string>('nroperacao'));
        operacaoObj.AddPair('nomeoperacao', Valores.GetValue<string>('nomeoperacao'));
        operacaoObj.AddPair('dtvencimento', Valores.GetValue<string>('dtvencimento'));
        operacaoObj.AddPair('valoroperacao', Valores.GetValue<string>('valoroperacao'));
        operacaoObj.AddPair('observacoes', Valores.GetValue<string>('observacoes'));
        operacaoObj.AddPair('garantias', Valores.GetValue<string>('garantias'));
        operacaoObj.AddPair('cpf', Valores.GetValue<string>('cpf/cnpj'));
        operacaoObj.AddPair('cod_banco', ID_BANCO.ToString);
      Except
         operacaoObj.AddPair('nroperacao', 'NULL');
         operacaoObj.AddPair('dtvencimento', 'NULL');
         operacaoObj.AddPair('cpf', 'NULL');
      End;

      // ----------------- CADASTRO DO CLIENTE/OPERAÇÃO, CHECANDO ANTES SE JÁ EXISTE -----------------
      with FormPrincipal do
      begin
        DB_Check.Active := false;
        DB_Check.SQL.Text := 'SELECT * FROM clientes WHERE cpf = :cpf_check';
        DB_Check.ParamByName('cpf_check').Value := clienteObj.Values['CPF'].Value;
        DB_Check.Open;

        // CHECA SE O CLIENTE JÁ EXISTE
        // Se não existe...
        if DB_Check.RecordCount = 0 then
        begin
          DB_Query.Active := false;
          DB_Query.SQL.Text := _INSERT;
          DB_Query.SQL.Add(' VALUES (:codigo, :nome, :cpf, :endereco, :bairro, :cidade, :cep, :uf, :telefone1, :telefone2, :telefone3, :email1, :email2)');

          // CADASTRA O CLIENTE
          DB_Query.ParamByName('codigo').Value    := ID_Gen; inc(ID_Gen);
          DB_Query.ParamByName('nome').Value      := clienteObj.Values['NomeCliente'].Value;
          DB_Query.ParamByName('cpf').Value       := clienteObj.Values['CPF'].Value;
          DB_Query.ParamByName('endereco').Value  := clienteObj.Values['Endereco'].Value;
          DB_Query.ParamByName('bairro').Value    := clienteObj.Values['bairro'].Value;
          DB_Query.ParamByName('cidade').Value    := clienteObj.Values['cidade'].Value;
          DB_Query.ParamByName('cep').Value       := clienteObj.Values['cep'].Value;
          DB_Query.ParamByName('uf').Value        := clienteObj.Values['uf'].Value;
          DB_Query.ParamByName('telefone1').Value := clienteObj.Values['telefone1'].Value;
          DB_Query.ParamByName('telefone2').Value := clienteObj.Values['telefone2'].Value;
          DB_Query.ParamByName('telefone3').Value := clienteObj.Values['telefone3'].Value;
          DB_Query.ParamByName('email1').Value    := clienteObj.Values['email1'].Value;
          DB_Query.ParamByName('email2').Value    := clienteObj.Values['email2'].Value;


          Try
            DB_Query.ExecSQL;
            DB_Query.Connection.Commit;
            Memo_log.Lines.Add('Tabela importada');
          Except on E : Exception do
            Result.AddPair('Exception', E.Message);
          End;

        end;

        DB_Check.Close;


        DB_Check2.Active := false;
        DB_Check2.SQL.Text := 'SELECT * FROM clientes WHERE cpf = :cpf_check';
        DB_Check2.ParamByName('cpf_check').Value := operacaoObj.Values['cpf'].Value;
        DB_Check2.Open;


        if operacaoObj.Values['dtvencimento'].Value <> 'NULL' then
//        dataRem := VarToDateTime(operacaoObj.Values['dtvencimento'].Value);
//        codigoData := IntToStr(Trunc(dataRem - EncodeDate(1997,10,07)));
        codigoData := IntToStr(Trunc(now - EncodeDate(1997,10,07)));
        codremessa := IntToStr(ID_BANCO)+codigoData;


        DB_Check3.Active := false;
        DB_Check3.SQL.Text := 'SELECT * FROM operacoes WHERE cliente = :cliente AND nroperacao = :noperacao AND banco = :banco';
        DB_Check3.ParamByName('cliente').Value := DB_Check2.FieldByName('codigo').Value;
        DB_Check3.ParamByName('noperacao').Value := operacaoObj.Values['nroperacao'].Value;
        DB_Check3.ParamByName('banco').Value := ID_BANCO;
        DB_Check3.Open;

        // ----------------- CADASTRO DE OPERAÇÃO -----------------
        DB_Query.Active := false;
        DB_Query.SQL.Text := _INSERT_OP;
        DB_Query.SQL.Add(' VALUES (:cliente, :nroperacao, :remessa, :banco, :tipooperacao, :datavencto, :valordivida, :condnegociais, :garantiasreais)');

        // Verifica se a operação já não foi cadastrada
        if DB_Check3.RecordCount = 0 then
        begin
          // Se o registro tem alguma operação relacionada
          if operacaoObj.Values['nroperacao'].Value <> 'NULL' then
          begin
            DB_Query.ParamByName('cliente').Value       := DB_Check2.FieldByName('codigo').Value;
            DB_Query.ParamByName('nroperacao').Value    := operacaoObj.Values['nroperacao'].Value;
            DB_Query.ParamByName('remessa').Value       := codremessa;
            DB_Query.ParamByName('banco').Value         := ID_BANCO;
            DB_Query.ParamByName('tipooperacao').Value  := operacaoObj.Values['nomeoperacao'].Value;
            DB_Query.ParamByName('datavencto').Value    := operacaoObj.Values['dtvencimento'].Value;
            DB_Query.ParamByName('valordivida').Value   := operacaoObj.Values['valoroperacao'].Value;
            DB_Query.ParamByName('condnegociais').Value := operacaoObj.Values['observacoes'].Value;
            DB_Query.ParamByName('garantiasreais').Value:= operacaoObj.Values['garantias'].Value;

            Try
              DB_Query.ExecSQL;
            Except on E : Exception do
              Result.AddPair('Exception', E.Message);
            End;

            DB_Check2.Close;
          end;
        DB_Check3.Open;
        end;

      end;

    end;
end;

function TSM.UpdateLista(ID_BANCO: integer): TJSONObject;
const
  _INSERT = 'INSERT INTO listas (id, id_banco, nome, tipoemail, diasvenc, horadisparo, mensagem, tipocampanha) VALUES (:id, :id_banco, :nome, :tipoemail, :diasvenc, :horadisparo, :mensagem, :tipocampanha)';
var
  WebModule   : TWebModule;
  stringJSON  : TArray<string>;
  strValor    : string;
  ID_Gen      : integer;
  forIndex    : integer;
  stringTemp  : string;
  listaObj    : TJSONObject;
begin
  // Gera uma chave primária e instancia os objetos JSON
  ID_Gen  := primary_key('listas', 'id')+1;
  Result  := TJSONObject.Create;
  listaObj:= TJSONObject.Create;

  // Tenta recuperar o conteúdo do Request Body
  Try
    WebModule := GetDataSnapWebModule;
  Except on E : Exception do
    Result.AddPair('Message', 'Erro ao recuperar conteúdo');
  End;

  if WebModule.Request.Content.IsEmpty then
  begin
      Result.AddPair('Message', 'Conteúdo vazio');
  end;

  // Recupera a string JSON enviada e constroi um objeto JSON ordenado.
  stringJSON := WebModule.Request.ContentFields.ToStringArray;
  forIndex := 1;
  for strValor in stringJSON do
  begin
    if Odd(forIndex) then
    begin
      stringTemp := StripChars(strValor, [',','\','"','{']);
    end
    else
    begin
      listaObj.AddPair(stringTemp, StripChars(strValor, [',','\','"','{']));
    end;
    forIndex := forIndex+1;
  end;
  // ---------- OBJETO CONSTRUÍDO ----------

  with FormPrincipal do
  begin
    DB_Query.Active := false;
    DB_Query.SQL.Text := _INSERT;
    DB_Query.ParamByName('id').Value :=  ID_Gen;
    DB_Query.ParamByName('id_banco').Value :=  ID_BANCO;
    DB_Query.ParamByName('nome').Value :=  listaObj.Values['nomeLista'].Value;
    DB_Query.ParamByName('tipoemail').Value :=  listaObj.Values['tipoEmail'].Value;
    DB_Query.ParamByName('diasvenc').Value :=  listaObj.Values['diasVencimento'].Value;
    DB_Query.ParamByName('horadisparo').Value :=  listaObj.Values['horaDisparo'].Value;
    DB_Query.ParamByName('mensagem').Value :=  listaObj.Values['mensagemLista'].Value;
    DB_Query.ParamByName('tipocampanha').Value :=  listaObj.Values['tipoCampanha'].Value;

    Try
      DB_Query.ExecSQL;
      Result.AddPair('Response', 'Lista cadastrada com sucesso');
      Memo_log.Lines.Add('Lista cadastrada');
    Except on E : Exception do
      Result.AddPair('Exception', E.Message);
    End;
  end;

end;

function TSM.UpdateOperacao(ID_BANCO: integer): TJSONObject;
const
  _UPDATE = 'UPDATE operacoes SET tipooperacao = :tipooperacao, datavencto = :datavencto, valornominal = :valornominal WHERE cliente = :cliente AND nroperacao = :nroperacao AND remessa = :remessa ';
var
  WebModule   : TWebModule;
  listaObj    : TJSONObject;
  JSONVal     : TJSONValue;
  JSONArr     : TJSONArray;
  i           : integer;
  opObj       : TJSONObject;
  idfront     : string;
  nroperacao  : string;
  codcliente  : string;
  remessa     : string;
  idArr       : TArray<String>;
begin
  Result  := TJSONObject.Create;

  // Tenta recuperar o conteúdo do Request Body
  Try
    WebModule := GetDataSnapWebModule;
  Except on E : Exception do
    Result.AddPair('Message', 'Erro ao recuperar conteúdo');
  End;

  if WebModule.Request.Content.IsEmpty then
  begin
      Result.AddPair('Message', 'Conteúdo vazio');
  end;

  // Parseamento do JSON para um JSONObject
  listaObj := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(WebModule.Request.Content), 0) as TJSONObject;
  JSONVal := listaObj.Get('ops_json').JsonValue;
  JSONArr := JSONVal as TJSONArray;

  for i := 0 to JSONArr.Size - 1  do
  begin
    opObj := JSONArr.Get(i) as TJSONObject;
    idfront := opObj.Values['id'].Value;

    // Obtenção das informações de unicidade do registro de OPERAÇÃO
    idArr := idFront.Split(['nrc']);
    nroperacao := idArr[0];
    remessa := idArr[1];
    codcliente := idArr[2];

    // UPDATE no Banco
    with FormPrincipal do
    begin
      DB_Query.Active := false;
      DB_Query.SQL.Text := _UPDATE;
      DB_Query.ParamByName('cliente')     := codcliente;
      DB_Query.ParamByName('nroperacao')  := nroperacao;
      DB_Query.ParamByName('remessa')     := remessa;
      DB_Query.ParamByName('tipooperacao'):= opObj.Values['operacao'].Value;
      DB_Query.ParamByName('datavencto')  := opObj.Values['datavencto'].Value;
      DB_Query.ParamByName('valornominal'):= opObj.Values['valornominal'].Value;
    end;
  end;

end;

end.

